<?php

//$Id$

// Copyright 2004-2005 Khalid Baheyeldin http://2bits.com


function feedback_help ($section = 'admin/help#feedback') {
  $output = '';

  switch($section) {
    case 'admin/help#feedback':
      $output .= t("
      <p>Users with the correct <a href=\"%permissions\">permissions</a> can send feedback
       to the site admin via email from a form on the site.</p>
      <p>To enable its use, a user needs the \"access feedback\" permission.</p>
      <p>The site admin specifies the email address that the users send to, as well as other
       parameters, such as what fields to show the user to fill (name, address, email), whether
       the user address is to be validated, and whether to log all attempts to use this form.</p>
      <p>The email address is never visible to the users, and therefore cannot be used by SPAM
       harvesters.</p>",
       array("%permissions" => url("admin/user/permission"), "%feedback" => url("feedback")));
      break;
    case 'admin/modules#description':
      $output = t("Enables visitors to your site to provide feedback from a web form.");
      break;
  }

  return $output;
}

function feedback_perm() {
  return array ('can send feedback');
}

function feedback_menu($may_cache) {
  global $user;
  $items = array();

  $access = user_access('can send feedback');
  $title  = variable_get("feedback_nav_link", "feedback");


  if ($may_cache) {
    $items[] = array(
    'path'     => 'feedback',
    'callback' => 'feedback_page',
    'title'    => $title,
    'access'   => $access,
    'weight'   => 0);
 }

  return $items;
}


function feedback_link($type, $node = 0, $main = 0) {
  global $user;

  $links = array();

  if ($type == 'page' && user_access('can send feedback')) {
  $links[] = l(t('feedback'), 'feedback');
  }

  return $links;
}

function feedback_settings() {
  $form['feedback_email'] = array (
    '#type' => 'textfield',
    '#title' => t('Default Email Address'),
    '#default_value' => _feedback_get_to_email(),
    '#size' => 80,
    '#maxlength' => 300,
    '#description' => t('The email address which should receive all form submissions'),
  );

  $form['feedback_nav_link'] = array (
    '#type' => 'textfield',
    '#title' => t('Navigation link text'),
    '#default_value' => variable_get('feedback_nav_link', 'feedback'),
    '#size' => '80',
    '#maxlength' => '300',
    '#description' => t('The text that will be shown in the navigation link'),
  );
  
  $form['feedback_pageheader'] = array (
    '#type' => 'textfield',
    '#title' => t('Feedback Page Header'),
    '#default_value' => variable_get('feedback_pageheader', 'Use this form to send us feedback'),
    '#size' => '80',
    '#maxlength' => '300',
    '#description' => t('The page header text that will be shown at the top of the feedback page'),
  );

  $form['feedback_subject_prefix'] = array (
    '#type' => 'textfield',
    '#title' => t('Subject Prefix'),
    '#default_value' => variable_get('feedback_subject_prefix', 'Feedback: '),
    '#size' => '80',
    '#maxlength' => '80',
    '#description' => t('The prefix that should be added before the subject on each email'),
  );

  $form['feedback_instructions'] = array (
    '#type' => 'textarea',
    '#title' => t('Instructions'),
    '#default_value' => variable_get('feedback_instructions', 'Enter your message below: '),
    '#cols' => '60',
    '#rows' => '10',
    '#description' => t('The instructions that will be displayed for the user on how to fill the form'),
  );

  $form['feedback_rmsg_success'] = array (
    '#type' => 'textfield',
    '#title' => t('Result Message - Success'),
    '#default_value' => variable_get('feedback_rmsg_success', 'Thank you for your message.'),
    '#size' => '80',
    '#maxlength' => '80',
    '#description' => t('The message that will be printed upon successfully completing the feedback request'),
  );

  $form['feedback_rmsg_failure'] = array (
    '#type' => 'textfield',
    '#title' => t('Result Message - Failure'),
    '#default_value' => variable_get('feedback_rmsg_failure', 'There are errors in your form.'),
    '#size' => '80',
    '#maxlength' => '80',
    '#description' => t('The message that will be printed upon encountering an error in the feedback request'),
  );

  $form['feedback_fields'] = array (
    '#type' => 'fieldset',
    '#title' => t('Fields to include on the form:'),
    '#tree' => FALSE,
  );
  
  $form['feedback_fields']['feedback_field_email'] = array (
    '#type' => 'checkbox',
    '#title' => t('Sender Email Address'),
    '#default_value' => variable_get('feedback_field_email', '1'),
  );

  $form['feedback_fields']['feedback_field_name'] = array (
    '#type' => 'checkbox',
    '#title' => t('Sender Name'),
    '#default_value' => variable_get('feedback_field_name', '1'),
  );

  $form['feedback_fields']['feedback_field_postal'] = array (
    '#type' => 'checkbox',
    '#title' => t('Postal Address'),
    '#default_value' => variable_get('feedback_field_postal', '0'),
  );

  $form['feedback_fields']['feedback_field_phone'] = array (
    '#type' => 'checkbox',
    '#title' => t('Phone Number'),
    '#default_value' => variable_get('feedback_field_phone', '0'),
  );

  $form['feedback_fields']['feedback_field_subject'] = array (
    '#type' => 'checkbox',
    '#title' => t('Message Subject'),
    '#default_value' => variable_get('feedback_field_subject', '1'),
  );

  $form['feedback_fields']['feedback_field_body'] = array (
    '#type' => 'checkbox',
    '#title' => t('Message Body'),
    '#default_value' => variable_get('feedback_field_body', '1'),
  );

  $form['miscellaneous_settings'] = array (
    '#type' => 'fieldset',
    '#title' => t('Miscellaneous Settings:'),
    '#tree' => FALSE,
  );

  $form['miscellaneous_settings']['feedback_validate_sender_address'] = array (
    '#type' => 'checkbox',
    '#title' => t('Validate Sender\'s Email Address'),
    '#default_value' => variable_get('feedback_validate_sender_address', '0'),
  );

  $form['miscellaneous_settings']['feedback_logging'] = array (
    '#type' => 'checkbox',
    '#title' => t('Log all feedback attempts to watchdog'),
    '#default_value' => variable_get('feedback_logging', '1'),
  );

  return $form;
}

function feedback_page() {
  $edit = $_POST["edit"];
  $op = arg(1);
  
  // Set breadcrumbs
  $breadcrumb = array(array('path' => 'feedback'));
  menu_set_location($breadcrumb);

  if ($edit) {
    if ( variable_get("feedback_logging", "1") ) {
      feedback_watchdog_log();
    }

    feedback_validate_data();
    if (form_get_errors()) {
      $form = feedback_display_form() ;
      print theme("page", $form);
    }
    else {
      feedback_send_email();
      drupal_set_message(variable_get("feedback_rmsg_success", "Thank you for your message"));
      drupal_goto(); // Go to home page
    }
  }
  else {
    $form = feedback_display_form () ;
    print theme("page", $form);
  }
}

function feedback_send_email() {
  $edit = $_POST["edit"];

  $subject_prefix = variable_get("feedback_subject_prefix", "");
  
  $subject = $subject_prefix . " " . $edit["form_field_subject"] ;

  $from_email = $edit["form_field_email"] ? $edit["form_field_email"] : _feedback_get_to_email();

  $to = _feedback_get_to_email();

  $body = feedback_format_body($edit["form_field_body"]) . feedback_custom_footers();

  $headers = feedback_custom_headers();

  if ($to) {
     user_mail($to, $subject, $body, $headers);
     $rc = true;
     }
  else {
     $rc = false;
     }

  return $rc;
}

function _feedback_get_to_email() {
  return variable_get('feedback_email', variable_get('site_mail', ini_get('sendmail_from')));
}

function feedback_display_form () {
  global $user;

  $edit = $_POST["edit"];

  if (!$edit['form_field_name'] && $user->name) {
    $edit['form_field_name'] = $user->name;
  }
  if (!$edit['form_field_email'] && $user->mail) {
    $edit['form_field_email'] = $user->mail;
  }
  
  drupal_set_title(variable_get("feedback_pageheader", 'feedback'));

  $form['form_instructions'] = array (
    '#type' => 'markup',
    '#value' => variable_get('feedback_instructions', 'Enter your message below'),
    );

  if ( variable_get("feedback_field_name", t('Name')) )
    $form['form_field_name'] = array (
      '#type' => 'textfield',
      '#title' => t('Your Full Name'),
      '#default_value' => $edit['form_field_name'],
      '#size' => '60',
      '#maxlength' => '64',
    );
    

  if ( variable_get("feedback_field_email", t('Email Address')) )
    $form['form_field_email'] = array (
      '#type' => 'textfield',
      '#title' => t('Your E-Mail Address'),
      '#default_value' => $edit['form_field_email'],
      '#size' => '60',
      '#maxlength' => '64',
    );

  if ( variable_get("feedback_field_postal", t('Postal Address')) ) 
    $form['form_field_postal'] = array (
      '#type' => 'textfield',
      '#title' => t('Your Postal Address'),
      '#default_value' => $edit['form_field_postal'],
      '#size' => '50',
      '#maxlength' => '64',
    );

  if ( variable_get("feedback_field_phone", t('Phone Number')) ) 
    $form['form_field_phone'] = array (
      '#type' => 'textfield',
      '#title' => t('Your Phone Number'),
      '#default_value' => $edit['form_field_phone'],
      '#size' => '60',
      '#maxlength' => '64',
    );

  if ( variable_get("feedback_field_subject", t('Subject')) ) 
    $form['form_field_subject'] = array (
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => $edit['form_field_subject'],
      '#size' => '60',
      '#maxlength' => '64',
    );

  if ( variable_get("feedback_field_body", t('Message')) ) 
    $form['form_field_body'] = array (
      '#type' => 'textarea',
      '#title' => t('Message'),
      '#default_value' => $edit['form_field_body'],
      '#cols' => '60',
      '#rows' => '15',
    );

    $form['form_field_referer'] = array (
      '#type' => 'hidden',
      '#value' => filter_xss($_SERVER[HTTP_REFERER]),
    );

    $form['submit'] = array (
      '#type' => 'submit',
      '#value' => t('Send Message'),
    );

  return drupal_get_form('', $form);
}

function feedback_watchdog_log() {
  $edit = $_POST["edit"];

  $name  = $edit["form_field_name"];
  $email = $edit["form_field_email"]; 
  $subj  = $edit["form_field_subject"]; 

  $message = 'feedback: ' . $name . ' &lt;' . $email . '&gt; subject: ' . $subj;

  watchdog ( "user", check_plain($message));
}

function feedback_validate_data() {
  global $user;
  $edit = $_POST["edit"];

  $name    = $edit["form_field_name"] ;
  $email   = $edit["form_field_email"] ; 
  $subject = $edit["form_field_subject"] ; 
  $body    = $edit["form_field_body"] ; 
  $postal  = $edit["form_field_postal"] ; 
  $phone   = $edit["form_field_phone"] ; 
  $referer = $edit["form_field_referer"] ; 

  if (!strlen(trim($name)) && variable_get("feedback_field_name", "") ) {
    form_set_error('form_field_name', t('Please enter your full name'));
  }
  elseif (feedback_check_exploit($name)) {
    form_set_error('form_field_name', t("Invalid data in name"));
  }

  if (!strlen(trim($email)) && variable_get ("feedback_field_email", "") ) {
	form_set_error('form_field_email', t('Please enter your e-mail address'));
  }
  else {
    $smtp_err = feedback_validate_email ($email);
    if ($smtp_err) {
      form_set_error('form_field_email', $smtp_err);
    }
    elseif (feedback_check_exploit($email)) {
      form_set_error('form_field_email', t("Invalid data in e-mail address"));
    }
  }

  if (!strlen(trim($subject)) && variable_get ("feedback_field_subject", "") ) {
    form_set_error('form_field_subject', t('Please enter a subject'));
  }
  elseif (feedback_check_exploit($subject)) {
    form_set_error('form_field_subject', t("Invalid data in subject"));
  }

  // Note: The body does not need to be checked for exploits because it is
  // treated as text (RFC 822).
  if (!strlen(trim($body)) && variable_get ("feedback_field_body", "") ) {
    form_set_error('form_field_body', t('Please enter your message'));
  }

  if (!strlen(trim($postal)) && variable_get ("feedback_field_postal", "") ) {
    form_set_error('form_field_postal', t('Please enter your postal address'));
  }
  elseif (feedback_check_exploit($postal)) {
    form_set_error('form_field_postal', t("Invalid data in postal address"));
  }

  if (!strlen(trim($phone)) && variable_get ("feedback_field_phone", "") ) {
    form_set_error('form_field_phone', t('Please enter your phone number'));
  }
  elseif (feedback_check_exploit($phone)) {
    form_set_error('form_field_phone', t("Invalid data in phone number"));
  }

  if (feedback_check_exploit($referer)) {
    form_set_error('referer', t("Invalid data in referer"));
  }
}

function feedback_check_exploit($data) {
  $bad_strings = array (
    'To:',
    'Cc:',
    'Bcc:',
    'Content-Type:',
    'MIME-Version:',
    'Content-Transfer-Encoding:');

  foreach($bad_strings as $str) {
    if (stristr($data, $str)) {
      watchdog ('user', t('Attempt to relay spam using %str. Field is %data',
        array('str'=>$str, 'data'=>$data)));
      return true;
    }
  }
  return false;
}

function feedback_validate_email($email) {

 if (valid_email_address($email)) {
    // It looks like a valid email address
    if ( variable_get ("feedback_validate_sender_address", "") ) {
       $rc = feedback_try_to_feedback_address ( $email );
       }
    else {
       $rc = "";
       }
    }
 else {
    $rc = t("Invalid E-mail address structure");
    }

 return $rc;    
}

function feedback_try_to_feedback_address($email) {

 // This function is based on one that was written by
 // Jon S. Stevens jon AT clearink.com
 // Copyright 1998 Jon S. Stevens, Clear Ink
 // This code has all the normal disclaimers.
 // It is free for any use, just keep the credits intact.

$server_name = $_SERVER['SERVER_NAME'];
    
$rc = "Undefined error";

list ( $user, $domain )  = split ( "@", $email, 2 );
$arr = explode ( ".", $domain );
$count = count ( $arr );
$tld = $arr[$count - 2] . "." . $arr[$count - 1];

if ( !$tld ) {
   $rc = "Error: Invalid domain part in e-mail";
   return $rc;
   }

if ( checkdnsrr ( $tld, "MX" ) ) {
  if ( getmxrr ( $tld, $mxhosts, $weight ) ) {
    for ( $i = 0; $i < count ( $mxhosts ); $i++ ) {
      $fp = fsockopen ( $mxhosts[$i], 25 );
      if ( $fp ) {
        $s = 0;
        $c = 0;
        $out = "";
        set_socket_blocking ( $fp, false );
        do {
          $out = fgets ( $fp, 2500 );
          if ( ereg ( "^220", $out ) ) {
            $s = 0;
            $out = "";
            $c++;
          }
          else
          if ( ( $c > 0 ) && ( $out == "" ) ) {
            break;
          }
          else {
            $s++;
          }
          if ( $s == 9999 ) {
            break;
          }
        } while ( $out == "" );

        set_socket_blocking ( $fp, true );

        fputs ( $fp, "HELO $server_name\n" );
        $output = fgets ( $fp, 2000 );
        fputs ( $fp, "MAIL FROM: <info@" . $tld . ">\n" );
        $output = fgets ( $fp, 2000 );
        fputs ( $fp, "RCPT TO: <$email>\n" );            
        $output = fgets ( $fp, 2000 );
        if ( ereg ( "^250", $output ) ) {
          $rc = "";
        }
        else {
          $rc = $output;
        }

        fputs ( $fp, "QUIT\n" );
        fclose( $fp );

        if ($rc == "") {
          break;
          }
        }
      }
    }
  }
return $rc;
}

function feedback_custom_footers() {
  global $user;

  $edit = $_POST["edit"];
  $site_name = variable_get("site_name", "") ;

  if ( $site_name )
    $footer .= "\nSite Name       : " . variable_get("site_name", "") ;
  if ( $user->name )
    $footer .= "\nRegistered name : " . $user->name;
  if ( isset($edit['form_field_name']))
    $footer .= "\nFull Name       : " . $edit['form_field_name'];
  if ( isset($edit['form_field_email']))
    $footer .= "\nE-mail address  : " . $edit['form_field_email'];
  if ( isset($edit['form_field_postal']))
    $footer .= "\nPostal address  : " . $edit['form_field_postal'];
  if ( isset($edit['form_field_phone']))
    $footer .= "\nPhone Number    : " . $edit['form_field_phone'];
  if ( isset($edit['form_field_referer']))
    $footer .= "\nReferring page  : " . $edit['form_field_referer'];
  if ( isset($_SERVER['REMOTE_ADDR']))
    $footer .= "\nIP Address      : " . 'http://whois.sc/' . $_SERVER['REMOTE_ADDR'];
  if ( isset($_SERVER['REMOTE_HOST']))
    $footer .= "\nMachine name    : " . $_SERVER['REMOTE_HOST'];
  if ( isset($_SERVER['HTTP_USER_AGENT']))
    $footer .= "\nBrowser info    : " . $_SERVER['HTTP_USER_AGENT'];

  return $footer;
}

function feedback_custom_headers() {
  $edit = $_POST["edit"];

  $headers = "";

  $headers .= "From: " . $edit['form_field_email'] . "\r\n";
  $headers .= "Reply-To: " . $edit['form_field_email']. "\r\n";
  $headers .= "Return-Path: " . $edit['form_field_email']. "\r\n";
  $headers .= "Errors-To: " . $edit['form_field_email'] . "\r\n";
  $headers .= "X-Mailer: Drupal\r\n";

  return $headers;
}

function feedback_format_body($body) {

  $trans = get_html_translation_table(HTML_ENTITIES);
  $trans = array_flip($trans);

  $output = wordwrap(strip_tags($body),72);
  $output = strtr(wordwrap(strip_tags($output),72), $trans);
  $output .= t("\n\n-- The above message was sent using the feedback page --");

  return $output;
}

?>
