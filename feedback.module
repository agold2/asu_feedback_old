<?php
// $Id$

/**
 * @file
 * Allows site visitors and users to report issues about this site.
 */

/**
 * Implementation of hook_perm().
 */
function feedback_permission() {
  return array(
    'access feedback form' => array(
      'title' => t('Access feedback form'),
      'description' => t('Submit feedback messages.'),
    ),
    'view feedback messages' => array(
      'title' => t('View feedback messages'),
      'description' => t('View, process, and delete submitted feedback messages.'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function feedback_theme() {
  return array(
    'feedback_admin_view_form' => array(
      'arguments' => array('form' => array()),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function feedback_menu() {
  $items['admin/reports/feedback'] = array(
    'title' => 'Feedback messages',
    'description' => 'View feedback messages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedback_admin_view_form'),
    'access arguments' => array('view feedback messages'),
  );
  return $items;
}

/**
 * Implementation of hook_init().
 */
function feedback_init() {
  if (user_access('access feedback form')) {
    $path = drupal_get_path('module', 'feedback');
    drupal_add_css($path . '/feedback.css');
    drupal_add_js($path . '/feedback.js');
  }
}

/**
 * Implementation of hook_block_list().
 */
function feedback_block_list() {
  $blocks['form'] = array(
    'info' => t('Feedback form'),
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function feedback_block_view($delta = '') {
  $block = array();
  switch($delta) {
    case 'form':
      if (!user_access('access feedback form') || $_GET['q'] == 'admin/reports/feedback') {
        break;
      }
      $block['subject'] = '<span class="feedback-link">' . t('Feedback') . '</span>';
      $block['content'] = drupal_get_form('feedback_form');
      break;
  }
  return $block;
}

/**
 * Implementation of hook_page_build().
 */
function feedback_page_build(&$page) {
  if (user_access('access feedback form') && $_GET['q'] != 'admin/reports/feedback') {
    $block = (object) feedback_block_view('form');
    $block->module = 'feedback';
    $block->delta = 'form';
    $block->region = 'footer';
    $build = $block->content;
    unset($block->content);
    $build += array(
      '#block' => $block,
      '#weight' => 0,
      '#sorted' => TRUE,
    );
    $build['#theme_wrappers'][] ='block';

    $page['page_bottom']['feedback'] = $build;
  }
}

/**
 * Form builder function for a user feedback form.
 */
function feedback_form($form, &$form_state) {
  $form['#attributes']['class'] = array('feedback-form');

  // Store the path on which this form is displayed.
  $form['location'] = array('#type' => 'value', '#value' => $_GET['q']);
  // Allow the form to be submitted via AJAX.
  $form['ajax'] = array('#type' => 'hidden', '#default_value' => 0);

  $form['help'] = array(
    '#prefix' => '<div class="feedback-help">',
    '#markup' => t('If you experience a bug or would like to see an addition on the current page, feel free to leave us a message.'),
    '#suffix' => '</div>',
  );
  if (user_access('view feedback messages')) {
    if (arg(0) != 'node') {
      $feedbacks = feedback_load(array('f.status' => 0, 'f.location_masked' => feedback_mask_path($_GET['q'])));
    }
    else {
      $feedbacks = feedback_load(array('f.status' => 0, 'f.location' => $_GET['q']));
    }
    if ($feedbacks) {
      $rows = '';
      foreach ($feedbacks as $feedback) {
        $rows .= '<div class="feedback-submitted">'. theme('username', $feedback) .' '. format_date($feedback->timestamp, 'small') .':</div>';
        $rows .= '<div class="feedback-body">'. feedback_format_message($feedback) .'</div>';
      }
      $form['messages'] = array(
        '#prefix' => '<div class="feedback-messages">',
        '#markup' => $rows,
        '#suffix' => '</div>',
      );
    }
  }
  $form['message'] = array(
    '#type' => 'textarea',
    '#attributes' => array('class' => array('feedback-message')),
    '#title' => t('Message'),
    '#required' => TRUE,
    '#wysiwyg' => FALSE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
    '#id' => 'feedback-submit',
    '#prefix' => '<div id="feedback-throbber">',
    '#suffix' => '</div>',
  );

  return $form;
}

function feedback_form_submit($form, &$form_state) {
  feedback_add_entry($form_state['values']['message'], $form_state['values']['location']);
  $message = t('Thanks for your feedback!');
  if ($form_state['values']['ajax']) {
    drupal_json_output(array('message' => $message));
    exit;
  }
  else {
    drupal_set_message($message);
  }
}

/**
 * Format a feedback entry.
 *
 * @param $entry
 *   A feedback object.
 */
function feedback_format_message($entry) {
  $message = check_plain($entry->message);
  if (!empty($entry->useragent)) {
    if (module_exists('browscap')) {
      $browserinfo = browscap_get_browser($entry->useragent);
      $browser = ($browserinfo['parent'] ? $browserinfo['parent'] .' / '. $browserinfo['platform'] : $browserinfo['useragent']);
      $message .= '<div class="browserinfo">(' . $browser . ')</div>';
    }
    else {
      $message .= '<div class="browserinfo">(' . $entry->useragent . ')</div>';
    }
  }
  return $message;
}

/**
 * Load feedback entries from the database.
 *
 * @param $conditions
 *   A keyed array of optional query conditions.
 */
function feedback_load($conditions) {
  $query = db_select('feedback', 'f')->fields('f');
  $query->join('users', 'u', 'f.uid = u.uid');
  $query->fields('u', array('name'));

  if (!empty($conditions)) {
    foreach ($conditions as $key => $value) {
      $query->condition($key, $value);
    }
  }
  $entries = $query->execute()->fetchAllAssoc('fid');
  return $entries;
}

/**
 * 'Mask' a path, i.e. replace all numeric arguments in a path with '%' placeholders.
 *
 * Please note that only numeric arguments with a preceding slash will be
 * replaced.
 *
 * @param $path
 *   An internal Drupal path, f.e. 'user/123/edit'.
 * @return
 *   A 'masked' path, for above example 'user/%/edit'.
 */
function feedback_mask_path($path) {
  return preg_replace('@/\d+@', '/%', $path);
}

/**
 * Store a new feedback entry in the database.
 *
 * @param string $message
 *   A feedback message text entered by an user.
 * @param string $location
 *   The path on which the feedback message was entered.
 */
function feedback_add_entry($message, $location) {
  global $user;

  return db_insert('feedback')
    ->fields(array(
      'uid' => $user->uid,
      'message' => trim($message),
      'location' => $location,
      'location_masked' => feedback_mask_path($location),
      'url' => url($location, array('absolute' => TRUE)),
      'timestamp' => REQUEST_TIME,
      'useragent' => $_SERVER['HTTP_USER_AGENT'],
    ))
    ->execute();
}

/**
 * Implementation of hook_user_cancel().
 */
function feedback_user_cancel($edit, $account, $method) {
  switch ($method) {
    case 'user_cancel_reassign':
      db_update('feedback')
        ->fields(array('uid' => 0))
        ->condition('uid', $account->uid)
        ->execute();
      break;

    case 'user_cancel_delete':
      db_delete('feedback')
        ->condition('uid', $account->uid)
        ->execute();
      break;
  }
}

/**
 * Build a (sortable) form containing a checkbox for each feedback entry.
 */
function feedback_admin_view_form($form, &$form_state) {
  $status_headings = array(
    0 => t('Open feedback messages'),
    1 => t('Processed feedback messages'),
  );
  $form['#feedback_header'] = array(
    array(),
    array('data' => t('Location'), 'field' => 'f.location_masked', 'sort' => 'asc'),
    array('data' => t('Date'), 'field' => 'f.timestamp'),
    array('data' => t('User'), 'field' => 'u.name'),
    t('Message'),
  );
  // Hack to prevent pager_query() from issuing PHP notices.
  if (!isset($_GET['page'])) {
    $_GET['page'] = '';
  }
  if (count(explode(',', $_GET['page'])) < 2) {
    $_GET['page'] .= ',0';
  }

  $form['feedback-messages'] = array('#tree' => TRUE);
  $query = db_select('feedback', 'f')->extend('PagerDefault')->extend('TableSort');
  $query->join('users', 'u', 'f.uid = u.uid');
  $query->fields('f')
    ->fields('u', array('name'))
    ->limit(50);
  foreach (array(0, 1) as $status) {
    $status_query = clone $query;
    $result = $status_query->element($status)
      ->condition('f.status', $status)
      ->execute()->fetchAllAssoc('fid');

    $form['feedback-messages'][$status] = array(
      '#type' => 'fieldset',
      '#title' => $status_headings[$status],
      '#collapsible' => TRUE,
      '#collapsed' => $status,
      '#attributes' => array('class' => array('feedback-messages')),
    );
    foreach ($result as $fid => $entry) {
      $form['feedback-messages'][$status][$fid] = array(
        '#type' => 'checkbox',
        '#return_value' => 1,
        '#default_value' => FALSE,
      );
      $form['feedback-messages'][$status][$fid]['location'] = array('#markup' => l(truncate_utf8($entry->location, 32, FALSE, TRUE), $entry->url));
      $form['feedback-messages'][$status][$fid]['date'] = array('#markup' => format_date($entry->timestamp, 'small'));
      $form['feedback-messages'][$status][$fid]['user'] = array('#markup' => theme('username', $entry));
      $form['feedback-messages'][$status][$fid]['message'] = array('#markup' => feedback_format_message($entry));
    }
  }
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  return $form;
}

/**
 * Output a sortable table containing all feedback entries.
 */
function theme_feedback_admin_view_form($form) {
  $output = '';
  foreach (element_children($form['feedback-messages']) as $status) {
    $item = &$form['feedback-messages'][$status];
    if (!isset($item['#type']) || $item['#type'] != 'fieldset') {
      continue;
    }
    // Build the table.
    $rows = array();
    foreach (element_children($item) as $element_entry) {
      $entry = &$item[$element_entry];
      // Render the data first.
      $rows[] = array(
        0,
        drupal_render($entry['location']),
        drupal_render($entry['date']),
        drupal_render($entry['user']),
        drupal_render($entry['message']),
      );
      // Render the checkbox.
      $rows[count($rows) - 1][0] = drupal_render($entry);
    }
    if (empty($rows)) {
      $rows[] = array(array('data' => t('No feedback entries available.'), 'colspan' => 5));
    }
    // Inject the table.
    $item['messages'] = array(
      '#markup' => theme('table', $form['#feedback_header'], $rows) . theme('pager', array(), $status),
      '#weight' => -1,
    );
    // Render the fieldset.
    $output .= drupal_render($item);
  }
  // Render internal FAPI and potential extra form elements.
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Form submit callback for admin view form.
 */
function feedback_admin_view_form_submit($form, &$form_state) {
  $update = array();
  // Determine feedback entries to update.
  foreach ($form_state['values']['feedback-messages'] as $status => $entries) {
    $entries = array_filter($entries);
    foreach ($entries as $fid => $value) {
      // Lame for now. :(
      $update[$fid] = ($status == 0 ? 1 : 0);
    }
  }
  // Update status of entries in database.
  foreach ($update as $fid => $value) {
    db_update('feedback')
      ->fields(array(
        'status' => $value,
      ))
      ->condition('fid', $fid)
      ->execute();
  }
}

